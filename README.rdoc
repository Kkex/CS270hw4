== CS 270 Assignment 4

In this assignment, you'll create associations between the models that are
necessary for the app to function.

<b>Step 1 - create the Event-Location associations</b>

This relationship is a many-to-many relationship, and we'll accomplish this by
creating a Rails <tt>has_and_belongs_to_many</tt> association.

In order to do this, we'll have to create a join table and update the Event and
Location model files.

* create a migration for the join table using the following command:
  <tt>rails g migration create_events_locations</tt>
* add the appropriate <tt>t.belongs_to</tt> references inside the migration
* migrate the database using <tt>rake db:migrate</tt>
* edit the Event model to read <tt>has_and_belongs_to_many :locations</tt>
* edit the Location model to read <tt>has_and_belongs_to_many :events</tt>

<b>Step 2 - create the Event-User associations</b>

Recall from the E-R diagram that there are actually two separate relationships
between events and users: one for participants and another for owners.  The
participants relationship will be many-to-many with a join table and a Rails
<tt>has_and_belongs_to_many</tt> association, and the owner relationship will
be one-to-many using a Rails <tt>has_many/belongs_to</tt> association.

* create a migration for the join table using the following command:
  <tt>rails g migration create_events_users</tt>
* add the appropriate <tt>t.belongs_to</tt> references inside the migration
* migrate the database using <tt>rake db:migrate</tt>
* edit the Event model to read <tt>has_and_belongs_to_many :users</tt>
  - remember to specify the appropriate join table
  - later, we want to be able to say something like <tt>@event.participants</tt>,
    so make sure to specify the appropriate options for the association
* edit the User model to read <tt>has_and_belongs_to_many :events</tt>
  - remember to specify the appropriate join table
  - later, we want to be able to say something like <tt>@user.participating_events</tt>,
    so make sure eto specify the appropriate options for the association

So far, this sets up the <tt>has_and_belongs_to_many</tt> association for event
participants.  Now, we want to set up the <tt>has_many/belongs_to</tt> association
for the event owner.

* edit the Event model to read <tt>belongs_to :users</tt>
  - we want to be able to say <tt>@event.owner</tt>, so make sure to specify the
    appropriate options here
* edit the User model to read <tt>has_many :events</tt>
  - we want to be able to say <tt>@user.owned_events</tt>, so make sure to specify
    the appropriate options here

<b>Step 3 - create the Location-User associations</b>

Recall from the E-R diagram that there are actually two separate relationships
between locations and users: one for visiting a location and another for owners.  The
visitors relationship will be many-to-many with a join table and a Rails
<tt>has_and_belongs_to_many</tt> association, and the owner relationship will
be one-to-many using a Rails <tt>has_many/belongs_to</tt> association.

* create a migration for the join table using the following command:
  <tt>rails g migration create_locations_users</tt>
* add the appropriate <tt>t.belongs_to</tt> references inside the migration
* migrate the database using <tt>rake db:migrate</tt>
* edit the Location model to read <tt>has_and_belongs_to_many :users</tt>
  - remember to specify the appropriate join table
  - we want to be able to say something like <tt>@location.visitors</tt>,
    so make sure to specify the appropriate options for the association
* edit the User model to read <tt>has_and_belongs_to_many :locations</tt>
  - remember to specify the appropriate join table
  - we want to be able to say something like <tt>@user.visited_locations</tt>,
    so make sure eto specify the appropriate options for the association

So far, this sets up the <tt>has_and_belongs_to_many</tt> association for location
visitors.  Now, we want to set up the <tt>has_many/belongs_to</tt> association
for the location owner.

* edit the Location model to read <tt>belongs_to :users</tt>
  - we want to be able to say <tt>@location.owner</tt>, so make sure to specify the
    appropriate options here
* edit the User model to read <tt>has_many :locations</tt>
  - we want to be able to say <tt>@user.owned_locations</tt>, so make sure to specify
    the appropriate options here